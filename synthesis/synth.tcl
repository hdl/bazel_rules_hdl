# Default Yosys synthesis tcl script for the synthesize_rtl rule.
# It can be replaced by a user-defined script by overriding the synth_tcl
# argument of that rule.

# User-defined synthesis scripts need to consult the following environment
# variables for their parameters:
# FLIST = a file that lists verilog sources (one file per line)
# TOP = top module for synthesis
# LIBERTY = liberty file for the target technology library
# OUTPUT = verilog file for synthesis output
# STATS_JSON = json file for structured stats output

yosys -import

set all_liberties [split $::env(ADDITIONAL_LIBERTIES) ","]
lappend all_liberties $::env(LIBERTY)

set all_lib_cmd "-liberty "
append all_lib_cmd [join $all_liberties " -liberty "]

# Use Yosys to generate stdcell blackboxes and re-read them.
# This enables parsing of macros and hand-placed stdcells.
foreach lib $all_liberties {
  read_liberty -lib -overwrite $lib
}

write_verilog -blackboxes $::env(STANDARD_CELL_BLACK_BOX)

# Read design.
set srcs_flist_path $::env(FLIST)
set srcs_flist_file [open $srcs_flist_path "r"]
set srcs_flist_data [read $srcs_flist_file]
set srcs [split $srcs_flist_data "\n"]
set srcs [linsert $srcs 0 $::env(STANDARD_CELL_BLACK_BOX)]
puts $srcs
foreach src $srcs {
    # Skip empty lines, including the implict one after the last \n delimiter
    # for files that end with a newline.
    if {$src eq ""} continue
    if {[info exists ::env(USE_SURELOG_FRONTEND)]} {
      yosys read_systemverilog $src
    } else {
      yosys read_verilog -sv -defer $src
    }
}

# Read UHDM designs.
set srcs_uhdm_flist_path $::env(UHDM_FLIST)
set srcs_uhdm_flist_file [open $srcs_uhdm_flist_path "r"]
set srcs_uhdm_flist_data [read $srcs_uhdm_flist_file]
set srcs [split $srcs_uhdm_flist_data "\n"]
puts $srcs
foreach src $srcs {
    # Skip empty lines, including the implict one after the last \n delimiter
    # for files that end with a newline.
    if {$src eq ""} continue
    read_uhdm $src
}

# Generic synthesis.
set top $::env(TOP)
hierarchy -check -top $top
yosys proc
yosys flatten

# Print arithm stats
yosys arith_stats

# Remove $print cells.  These cells represent Verilog $display() tasks.
# Some place and route tools cannot handle these in the output Verilog,
# so remove them here.
yosys delete {*/t:$print}

# Remove internal only aliases for public nets and then give created instances
# useful names. At this stage it is mainly flipflops created by the `proc`
# pass.
yosys opt_clean -purge

yosys synth -top $top

# Remove internal only aliases for public nets and then give created instances
# useful names. At this stage it is all the other synthesizable constructs.
# This should be done before techmapping where things can be converted
# dramatically and having useful names is helpful for debugging.
yosys opt_clean -purge

# Technology mapping of adders
if {[info exists ::env(ADDER_MAPPING)] && [file isfile $::env(ADDER_MAPPING)]} {
  # extract the full adders
  extract_fa
  # map full adders
  techmap -map $::env(ADDER_MAPPING)
  techmap
  # Quick optimization
  opt -fast -purge
}

# Map $DFF cells. Although dfflibmap now supports multiple liberty files,
# we intentionally only use pass the main liberty file here for runtime.
# Yosysand abc do not have ability to intelligently select the ideal FF type
# based on timing (it always selects the first it gets).
set liberty $::env(LIBERTY)
dfflibmap -liberty $liberty

opt

set clk_cmd ""
if { [info exists ::env(CLOCK_PERIOD) ] } {
  set clk_cmd " -D $::env(CLOCK_PERIOD) "
}
abc {*}$all_lib_cmd -dff -script $::env(ABC_SCRIPT) -constr $::env(CONSTR) \
    -g aig {*}$clk_cmd {*}$::env(DONT_USE_ARGS)

setundef -zero
splitnets
opt_clean -purge

set hicell ""
if {[info exists ::env(TIEHI_CELL_AND_PORT)]} {
  set hicell " -hicell "
  append hicell {*}[split $::env(TIEHI_CELL_AND_PORT) "/"]
}
set locell ""
if {[info exists ::env(TIELO_CELL_AND_PORT)]} {
  set locell " -locell "
  append locell {*}[split $::env(TIELO_CELL_AND_PORT) "/"]
}
hilomap {*}$hicell {*}$locell

# Remove internal only aliases for public nets and then give created instances
# useful names. At this stage it is anything generated by the techmapping
# passes.
yosys opt_clean -purge

# Write synthesized design.
set output $::env(OUTPUT)
write_verilog $output

# Print stats / info.
stat {*}$all_lib_cmd
if { [info exists ::env(STATS_JSON) ] } {
  tee -q -o $::env(STATS_JSON) stat -liberty $liberty -json
  yosys log Structured stats: $::env(STATS_JSON)
}
read_liberty -lib -ignore_miss_func $liberty
ltp -noff $top

yosys log -n "Flop count: "
yosys select -count t:*__df* t:DF* t:*_DFF* t:*_SDFF* t:*_ADFF* t:*dff

foreach lib $all_liberties {
  yosys log "Liberty: $lib"
}
