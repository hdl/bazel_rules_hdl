// vload[n] and vstore[n]


char2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __private char *p);

char2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __local char *p);

char2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __global char *p);

char2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __constant char *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (char2 data, size_t offset,
 	                                 __private char *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (char2 data, size_t offset,
 	                                 __local char *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (char2 data, size_t offset,
 	                                 __global char *p);




uchar2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __private uchar *p);

uchar2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __local uchar *p);

uchar2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __global uchar *p);

uchar2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __constant uchar *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (uchar2 data, size_t offset,
 	                                 __private uchar *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (uchar2 data, size_t offset,
 	                                 __local uchar *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (uchar2 data, size_t offset,
 	                                 __global uchar *p);




short2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __private short *p);

short2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __local short *p);

short2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __global short *p);

short2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __constant short *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (short2 data, size_t offset,
 	                                 __private short *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (short2 data, size_t offset,
 	                                 __local short *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (short2 data, size_t offset,
 	                                 __global short *p);




ushort2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __private ushort *p);

ushort2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __local ushort *p);

ushort2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __global ushort *p);

ushort2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __constant ushort *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (ushort2 data, size_t offset,
 	                                 __private ushort *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (ushort2 data, size_t offset,
 	                                 __local ushort *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (ushort2 data, size_t offset,
 	                                 __global ushort *p);




int2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __private int *p);

int2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __local int *p);

int2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __global int *p);

int2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __constant int *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (int2 data, size_t offset,
 	                                 __private int *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (int2 data, size_t offset,
 	                                 __local int *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (int2 data, size_t offset,
 	                                 __global int *p);




uint2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __private uint *p);

uint2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __local uint *p);

uint2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __global uint *p);

uint2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __constant uint *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (uint2 data, size_t offset,
 	                                 __private uint *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (uint2 data, size_t offset,
 	                                 __local uint *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (uint2 data, size_t offset,
 	                                 __global uint *p);




long2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __private long *p);

long2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __local long *p);

long2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __global long *p);

long2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __constant long *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (long2 data, size_t offset,
 	                                 __private long *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (long2 data, size_t offset,
 	                                 __local long *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (long2 data, size_t offset,
 	                                 __global long *p);




ulong2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __private ulong *p);

ulong2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __local ulong *p);

ulong2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __global ulong *p);

ulong2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __constant ulong *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (ulong2 data, size_t offset,
 	                                 __private ulong *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (ulong2 data, size_t offset,
 	                                 __local ulong *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (ulong2 data, size_t offset,
 	                                 __global ulong *p);




float2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __private float *p);

float2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __local float *p);

float2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __global float *p);

float2 __attribute__((always_inline)) __attribute__((overloadable)) vload2 (size_t  offset,
                                        const __constant float *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (float2 data, size_t offset,
 	                                 __private float *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (float2 data, size_t offset,
 	                                 __local float *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore2 (float2 data, size_t offset,
 	                                 __global float *p);




char3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __private char *p);

char3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __local char *p);

char3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __global char *p);

char3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __constant char *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (char3 data, size_t offset,
 	                                 __private char *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (char3 data, size_t offset,
 	                                 __local char *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (char3 data, size_t offset,
 	                                 __global char *p);




uchar3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __private uchar *p);

uchar3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __local uchar *p);

uchar3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __global uchar *p);

uchar3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __constant uchar *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (uchar3 data, size_t offset,
 	                                 __private uchar *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (uchar3 data, size_t offset,
 	                                 __local uchar *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (uchar3 data, size_t offset,
 	                                 __global uchar *p);




short3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __private short *p);

short3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __local short *p);

short3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __global short *p);

short3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __constant short *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (short3 data, size_t offset,
 	                                 __private short *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (short3 data, size_t offset,
 	                                 __local short *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (short3 data, size_t offset,
 	                                 __global short *p);




ushort3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __private ushort *p);

ushort3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __local ushort *p);

ushort3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __global ushort *p);

ushort3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __constant ushort *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (ushort3 data, size_t offset,
 	                                 __private ushort *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (ushort3 data, size_t offset,
 	                                 __local ushort *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (ushort3 data, size_t offset,
 	                                 __global ushort *p);




int3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __private int *p);

int3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __local int *p);

int3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __global int *p);

int3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __constant int *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (int3 data, size_t offset,
 	                                 __private int *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (int3 data, size_t offset,
 	                                 __local int *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (int3 data, size_t offset,
 	                                 __global int *p);




uint3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __private uint *p);

uint3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __local uint *p);

uint3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __global uint *p);

uint3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __constant uint *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (uint3 data, size_t offset,
 	                                 __private uint *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (uint3 data, size_t offset,
 	                                 __local uint *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (uint3 data, size_t offset,
 	                                 __global uint *p);




long3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __private long *p);

long3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __local long *p);

long3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __global long *p);

long3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __constant long *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (long3 data, size_t offset,
 	                                 __private long *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (long3 data, size_t offset,
 	                                 __local long *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (long3 data, size_t offset,
 	                                 __global long *p);




ulong3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __private ulong *p);

ulong3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __local ulong *p);

ulong3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __global ulong *p);

ulong3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __constant ulong *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (ulong3 data, size_t offset,
 	                                 __private ulong *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (ulong3 data, size_t offset,
 	                                 __local ulong *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (ulong3 data, size_t offset,
 	                                 __global ulong *p);




float3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __private float *p);

float3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __local float *p);

float3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __global float *p);

float3 __attribute__((always_inline)) __attribute__((overloadable)) vload3 (size_t  offset,
                                        const __constant float *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (float3 data, size_t offset,
 	                                 __private float *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (float3 data, size_t offset,
 	                                 __local float *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore3 (float3 data, size_t offset,
 	                                 __global float *p);




char4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __private char *p);

char4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __local char *p);

char4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __global char *p);

char4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __constant char *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (char4 data, size_t offset,
 	                                 __private char *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (char4 data, size_t offset,
 	                                 __local char *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (char4 data, size_t offset,
 	                                 __global char *p);




uchar4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __private uchar *p);

uchar4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __local uchar *p);

uchar4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __global uchar *p);

uchar4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __constant uchar *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (uchar4 data, size_t offset,
 	                                 __private uchar *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (uchar4 data, size_t offset,
 	                                 __local uchar *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (uchar4 data, size_t offset,
 	                                 __global uchar *p);




short4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __private short *p);

short4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __local short *p);

short4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __global short *p);

short4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __constant short *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (short4 data, size_t offset,
 	                                 __private short *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (short4 data, size_t offset,
 	                                 __local short *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (short4 data, size_t offset,
 	                                 __global short *p);




ushort4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __private ushort *p);

ushort4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __local ushort *p);

ushort4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __global ushort *p);

ushort4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __constant ushort *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (ushort4 data, size_t offset,
 	                                 __private ushort *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (ushort4 data, size_t offset,
 	                                 __local ushort *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (ushort4 data, size_t offset,
 	                                 __global ushort *p);




int4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __private int *p);

int4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __local int *p);

int4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __global int *p);

int4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __constant int *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (int4 data, size_t offset,
 	                                 __private int *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (int4 data, size_t offset,
 	                                 __local int *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (int4 data, size_t offset,
 	                                 __global int *p);




uint4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __private uint *p);

uint4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __local uint *p);

uint4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __global uint *p);

uint4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __constant uint *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (uint4 data, size_t offset,
 	                                 __private uint *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (uint4 data, size_t offset,
 	                                 __local uint *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (uint4 data, size_t offset,
 	                                 __global uint *p);




long4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __private long *p);

long4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __local long *p);

long4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __global long *p);

long4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __constant long *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (long4 data, size_t offset,
 	                                 __private long *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (long4 data, size_t offset,
 	                                 __local long *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (long4 data, size_t offset,
 	                                 __global long *p);




ulong4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __private ulong *p);

ulong4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __local ulong *p);

ulong4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __global ulong *p);

ulong4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __constant ulong *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (ulong4 data, size_t offset,
 	                                 __private ulong *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (ulong4 data, size_t offset,
 	                                 __local ulong *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (ulong4 data, size_t offset,
 	                                 __global ulong *p);




float4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __private float *p);

float4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __local float *p);

float4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __global float *p);

float4 __attribute__((always_inline)) __attribute__((overloadable)) vload4 (size_t  offset,
                                        const __constant float *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (float4 data, size_t offset,
 	                                 __private float *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (float4 data, size_t offset,
 	                                 __local float *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore4 (float4 data, size_t offset,
 	                                 __global float *p);




char8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __private char *p);

char8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __local char *p);

char8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __global char *p);

char8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __constant char *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (char8 data, size_t offset,
 	                                 __private char *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (char8 data, size_t offset,
 	                                 __local char *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (char8 data, size_t offset,
 	                                 __global char *p);




uchar8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __private uchar *p);

uchar8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __local uchar *p);

uchar8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __global uchar *p);

uchar8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __constant uchar *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (uchar8 data, size_t offset,
 	                                 __private uchar *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (uchar8 data, size_t offset,
 	                                 __local uchar *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (uchar8 data, size_t offset,
 	                                 __global uchar *p);




short8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __private short *p);

short8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __local short *p);

short8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __global short *p);

short8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __constant short *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (short8 data, size_t offset,
 	                                 __private short *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (short8 data, size_t offset,
 	                                 __local short *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (short8 data, size_t offset,
 	                                 __global short *p);




ushort8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __private ushort *p);

ushort8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __local ushort *p);

ushort8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __global ushort *p);

ushort8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __constant ushort *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (ushort8 data, size_t offset,
 	                                 __private ushort *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (ushort8 data, size_t offset,
 	                                 __local ushort *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (ushort8 data, size_t offset,
 	                                 __global ushort *p);




int8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __private int *p);

int8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __local int *p);

int8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __global int *p);

int8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __constant int *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (int8 data, size_t offset,
 	                                 __private int *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (int8 data, size_t offset,
 	                                 __local int *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (int8 data, size_t offset,
 	                                 __global int *p);




uint8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __private uint *p);

uint8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __local uint *p);

uint8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __global uint *p);

uint8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __constant uint *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (uint8 data, size_t offset,
 	                                 __private uint *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (uint8 data, size_t offset,
 	                                 __local uint *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (uint8 data, size_t offset,
 	                                 __global uint *p);




long8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __private long *p);

long8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __local long *p);

long8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __global long *p);

long8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __constant long *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (long8 data, size_t offset,
 	                                 __private long *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (long8 data, size_t offset,
 	                                 __local long *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (long8 data, size_t offset,
 	                                 __global long *p);




ulong8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __private ulong *p);

ulong8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __local ulong *p);

ulong8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __global ulong *p);

ulong8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __constant ulong *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (ulong8 data, size_t offset,
 	                                 __private ulong *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (ulong8 data, size_t offset,
 	                                 __local ulong *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (ulong8 data, size_t offset,
 	                                 __global ulong *p);




float8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __private float *p);

float8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __local float *p);

float8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __global float *p);

float8 __attribute__((always_inline)) __attribute__((overloadable)) vload8 (size_t  offset,
                                        const __constant float *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (float8 data, size_t offset,
 	                                 __private float *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (float8 data, size_t offset,
 	                                 __local float *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore8 (float8 data, size_t offset,
 	                                 __global float *p);




char16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __private char *p);

char16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __local char *p);

char16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __global char *p);

char16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __constant char *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (char16 data, size_t offset,
 	                                 __private char *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (char16 data, size_t offset,
 	                                 __local char *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (char16 data, size_t offset,
 	                                 __global char *p);




uchar16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __private uchar *p);

uchar16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __local uchar *p);

uchar16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __global uchar *p);

uchar16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __constant uchar *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (uchar16 data, size_t offset,
 	                                 __private uchar *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (uchar16 data, size_t offset,
 	                                 __local uchar *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (uchar16 data, size_t offset,
 	                                 __global uchar *p);




short16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __private short *p);

short16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __local short *p);

short16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __global short *p);

short16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __constant short *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (short16 data, size_t offset,
 	                                 __private short *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (short16 data, size_t offset,
 	                                 __local short *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (short16 data, size_t offset,
 	                                 __global short *p);




ushort16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __private ushort *p);

ushort16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __local ushort *p);

ushort16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __global ushort *p);

ushort16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __constant ushort *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (ushort16 data, size_t offset,
 	                                 __private ushort *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (ushort16 data, size_t offset,
 	                                 __local ushort *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (ushort16 data, size_t offset,
 	                                 __global ushort *p);




int16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __private int *p);

int16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __local int *p);

int16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __global int *p);

int16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __constant int *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (int16 data, size_t offset,
 	                                 __private int *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (int16 data, size_t offset,
 	                                 __local int *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (int16 data, size_t offset,
 	                                 __global int *p);




uint16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __private uint *p);

uint16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __local uint *p);

uint16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __global uint *p);

uint16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __constant uint *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (uint16 data, size_t offset,
 	                                 __private uint *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (uint16 data, size_t offset,
 	                                 __local uint *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (uint16 data, size_t offset,
 	                                 __global uint *p);




long16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __private long *p);

long16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __local long *p);

long16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __global long *p);

long16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __constant long *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (long16 data, size_t offset,
 	                                 __private long *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (long16 data, size_t offset,
 	                                 __local long *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (long16 data, size_t offset,
 	                                 __global long *p);




ulong16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __private ulong *p);

ulong16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __local ulong *p);

ulong16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __global ulong *p);

ulong16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __constant ulong *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (ulong16 data, size_t offset,
 	                                 __private ulong *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (ulong16 data, size_t offset,
 	                                 __local ulong *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (ulong16 data, size_t offset,
 	                                 __global ulong *p);




float16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __private float *p);

float16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __local float *p);

float16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __global float *p);

float16 __attribute__((always_inline)) __attribute__((overloadable)) vload16 (size_t  offset,
                                        const __constant float *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (float16 data, size_t offset,
 	                                 __private float *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (float16 data, size_t offset,
 	                                 __local float *p);


void __attribute__((always_inline)) __attribute__((overloadable)) vstore16 (float16 data, size_t offset,
 	                                 __global float *p);




// vstore[a]_half[n] and vload[a]_half[n] 




float __attribute__((always_inline)) __attribute__((overloadable)) vload_half (
	size_t offset,
 	const __private half *p);

float __attribute__((always_inline)) __attribute__((overloadable)) vload_half (
	size_t offset,
 	const __local half *p);

float __attribute__((always_inline)) __attribute__((overloadable)) vload_half (
	size_t offset,
 	const __global half *p);

float __attribute__((always_inline)) __attribute__((overloadable)) vload_half (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half (
    float data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rte (
    float data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rtz (
    float data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rtp (
    float data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rtn (
    float data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half (
    float data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rte (
    float data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rtz (
    float data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rtp (
    float data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rtn (
    float data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half (
    float data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rte (
    float data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rtz (
    float data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rtp (
    float data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half_rtn (
    float data,
    size_t offset,
    __global half *p);







float2 __attribute__((always_inline)) __attribute__((overloadable)) vload_half2 (
	size_t offset,
 	const __private half *p);

float2 __attribute__((always_inline)) __attribute__((overloadable)) vload_half2 (
	size_t offset,
 	const __local half *p);

float2 __attribute__((always_inline)) __attribute__((overloadable)) vload_half2 (
	size_t offset,
 	const __global half *p);

float2 __attribute__((always_inline)) __attribute__((overloadable)) vload_half2 (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2 (
    float2 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rte (
    float2 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rtz (
    float2 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rtp (
    float2 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rtn (
    float2 data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2 (
    float2 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rte (
    float2 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rtz (
    float2 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rtp (
    float2 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rtn (
    float2 data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2 (
    float2 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rte (
    float2 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rtz (
    float2 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rtp (
    float2 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half2_rtn (
    float2 data,
    size_t offset,
    __global half *p);




float2 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half2 (
	size_t offset,
 	const __private half *p);

float2 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half2 (
	size_t offset,
 	const __local half *p);

float2 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half2 (
	size_t offset,
 	const __global half *p);

float2 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half2 (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2 (
    float2 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rte (
    float2 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rtz (
    float2 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rtp (
    float2 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rtn (
    float2 data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2 (
    float2 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rte (
    float2 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rtz (
    float2 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rtp (
    float2 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rtn (
    float2 data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2 (
    float2 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rte (
    float2 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rtz (
    float2 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rtp (
    float2 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half2_rtn (
    float2 data,
    size_t offset,
    __global half *p);







float3 __attribute__((always_inline)) __attribute__((overloadable)) vload_half3 (
	size_t offset,
 	const __private half *p);

float3 __attribute__((always_inline)) __attribute__((overloadable)) vload_half3 (
	size_t offset,
 	const __local half *p);

float3 __attribute__((always_inline)) __attribute__((overloadable)) vload_half3 (
	size_t offset,
 	const __global half *p);

float3 __attribute__((always_inline)) __attribute__((overloadable)) vload_half3 (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3 (
    float3 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rte (
    float3 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rtz (
    float3 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rtp (
    float3 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rtn (
    float3 data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3 (
    float3 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rte (
    float3 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rtz (
    float3 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rtp (
    float3 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rtn (
    float3 data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3 (
    float3 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rte (
    float3 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rtz (
    float3 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rtp (
    float3 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half3_rtn (
    float3 data,
    size_t offset,
    __global half *p);




float3 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half3 (
	size_t offset,
 	const __private half *p);

float3 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half3 (
	size_t offset,
 	const __local half *p);

float3 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half3 (
	size_t offset,
 	const __global half *p);

float3 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half3 (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3 (
    float3 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rte (
    float3 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rtz (
    float3 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rtp (
    float3 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rtn (
    float3 data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3 (
    float3 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rte (
    float3 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rtz (
    float3 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rtp (
    float3 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rtn (
    float3 data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3 (
    float3 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rte (
    float3 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rtz (
    float3 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rtp (
    float3 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half3_rtn (
    float3 data,
    size_t offset,
    __global half *p);







float4 __attribute__((always_inline)) __attribute__((overloadable)) vload_half4 (
	size_t offset,
 	const __private half *p);

float4 __attribute__((always_inline)) __attribute__((overloadable)) vload_half4 (
	size_t offset,
 	const __local half *p);

float4 __attribute__((always_inline)) __attribute__((overloadable)) vload_half4 (
	size_t offset,
 	const __global half *p);

float4 __attribute__((always_inline)) __attribute__((overloadable)) vload_half4 (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4 (
    float4 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rte (
    float4 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rtz (
    float4 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rtp (
    float4 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rtn (
    float4 data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4 (
    float4 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rte (
    float4 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rtz (
    float4 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rtp (
    float4 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rtn (
    float4 data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4 (
    float4 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rte (
    float4 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rtz (
    float4 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rtp (
    float4 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half4_rtn (
    float4 data,
    size_t offset,
    __global half *p);




float4 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half4 (
	size_t offset,
 	const __private half *p);

float4 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half4 (
	size_t offset,
 	const __local half *p);

float4 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half4 (
	size_t offset,
 	const __global half *p);

float4 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half4 (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4 (
    float4 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rte (
    float4 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rtz (
    float4 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rtp (
    float4 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rtn (
    float4 data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4 (
    float4 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rte (
    float4 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rtz (
    float4 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rtp (
    float4 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rtn (
    float4 data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4 (
    float4 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rte (
    float4 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rtz (
    float4 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rtp (
    float4 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half4_rtn (
    float4 data,
    size_t offset,
    __global half *p);







float8 __attribute__((always_inline)) __attribute__((overloadable)) vload_half8 (
	size_t offset,
 	const __private half *p);

float8 __attribute__((always_inline)) __attribute__((overloadable)) vload_half8 (
	size_t offset,
 	const __local half *p);

float8 __attribute__((always_inline)) __attribute__((overloadable)) vload_half8 (
	size_t offset,
 	const __global half *p);

float8 __attribute__((always_inline)) __attribute__((overloadable)) vload_half8 (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8 (
    float8 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rte (
    float8 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rtz (
    float8 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rtp (
    float8 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rtn (
    float8 data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8 (
    float8 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rte (
    float8 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rtz (
    float8 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rtp (
    float8 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rtn (
    float8 data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8 (
    float8 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rte (
    float8 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rtz (
    float8 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rtp (
    float8 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half8_rtn (
    float8 data,
    size_t offset,
    __global half *p);




float8 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half8 (
	size_t offset,
 	const __private half *p);

float8 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half8 (
	size_t offset,
 	const __local half *p);

float8 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half8 (
	size_t offset,
 	const __global half *p);

float8 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half8 (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8 (
    float8 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rte (
    float8 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rtz (
    float8 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rtp (
    float8 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rtn (
    float8 data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8 (
    float8 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rte (
    float8 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rtz (
    float8 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rtp (
    float8 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rtn (
    float8 data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8 (
    float8 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rte (
    float8 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rtz (
    float8 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rtp (
    float8 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half8_rtn (
    float8 data,
    size_t offset,
    __global half *p);







float16 __attribute__((always_inline)) __attribute__((overloadable)) vload_half16 (
	size_t offset,
 	const __private half *p);

float16 __attribute__((always_inline)) __attribute__((overloadable)) vload_half16 (
	size_t offset,
 	const __local half *p);

float16 __attribute__((always_inline)) __attribute__((overloadable)) vload_half16 (
	size_t offset,
 	const __global half *p);

float16 __attribute__((always_inline)) __attribute__((overloadable)) vload_half16 (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16 (
    float16 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rte (
    float16 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rtz (
    float16 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rtp (
    float16 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rtn (
    float16 data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16 (
    float16 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rte (
    float16 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rtz (
    float16 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rtp (
    float16 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rtn (
    float16 data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16 (
    float16 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rte (
    float16 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rtz (
    float16 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rtp (
    float16 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstore_half16_rtn (
    float16 data,
    size_t offset,
    __global half *p);




float16 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half16 (
	size_t offset,
 	const __private half *p);

float16 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half16 (
	size_t offset,
 	const __local half *p);

float16 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half16 (
	size_t offset,
 	const __global half *p);

float16 __attribute__((always_inline)) __attribute__((overloadable)) vloada_half16 (
	size_t offset,
 	const __constant half *p);




void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16 (
    float16 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rte (
    float16 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rtz (
    float16 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rtp (
    float16 data,
    size_t offset,
    __private half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rtn (
    float16 data,
    size_t offset,
    __private half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16 (
    float16 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rte (
    float16 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rtz (
    float16 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rtp (
    float16 data,
    size_t offset,
    __local half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rtn (
    float16 data,
    size_t offset,
    __local half *p);



void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16 (
    float16 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rte (
    float16 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rtz (
    float16 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rtp (
    float16 data,
    size_t offset,
    __global half *p);

void __attribute__((always_inline)) __attribute__((overloadable)) vstorea_half16_rtn (
    float16 data,
    size_t offset,
    __global half *p);





// Async Copy and Prefetch Functions
// async_work_group_copy, async_work_group_strided_copy, prefetch



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local char *dst,
    const __global char *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local char *dst,
    const __global char *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global char *dst,
    const __local char *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global char *dst,
    const __local char *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global char *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uchar *dst,
    const __global uchar *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uchar *dst,
    const __global uchar *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uchar *dst,
    const __local uchar *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uchar *dst,
    const __local uchar *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uchar *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local short *dst,
    const __global short *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local short *dst,
    const __global short *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global short *dst,
    const __local short *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global short *dst,
    const __local short *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global short *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ushort *dst,
    const __global ushort *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ushort *dst,
    const __global ushort *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ushort *dst,
    const __local ushort *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ushort *dst,
    const __local ushort *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ushort *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local int *dst,
    const __global int *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local int *dst,
    const __global int *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global int *dst,
    const __local int *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global int *dst,
    const __local int *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global int *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uint *dst,
    const __global uint *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uint *dst,
    const __global uint *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uint *dst,
    const __local uint *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uint *dst,
    const __local uint *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uint *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local long *dst,
    const __global long *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local long *dst,
    const __global long *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global long *dst,
    const __local long *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global long *dst,
    const __local long *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global long *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ulong *dst,
    const __global ulong *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ulong *dst,
    const __global ulong *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ulong *dst,
    const __local ulong *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ulong *dst,
    const __local ulong *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ulong *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local float *dst,
    const __global float *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local float *dst,
    const __global float *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global float *dst,
    const __local float *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global float *dst,
    const __local float *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global float *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local char2 *dst,
    const __global char2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local char2 *dst,
    const __global char2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global char2 *dst,
    const __local char2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global char2 *dst,
    const __local char2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global char2 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uchar2 *dst,
    const __global uchar2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uchar2 *dst,
    const __global uchar2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uchar2 *dst,
    const __local uchar2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uchar2 *dst,
    const __local uchar2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uchar2 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local short2 *dst,
    const __global short2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local short2 *dst,
    const __global short2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global short2 *dst,
    const __local short2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global short2 *dst,
    const __local short2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global short2 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ushort2 *dst,
    const __global ushort2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ushort2 *dst,
    const __global ushort2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ushort2 *dst,
    const __local ushort2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ushort2 *dst,
    const __local ushort2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ushort2 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local int2 *dst,
    const __global int2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local int2 *dst,
    const __global int2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global int2 *dst,
    const __local int2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global int2 *dst,
    const __local int2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global int2 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uint2 *dst,
    const __global uint2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uint2 *dst,
    const __global uint2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uint2 *dst,
    const __local uint2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uint2 *dst,
    const __local uint2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uint2 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local long2 *dst,
    const __global long2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local long2 *dst,
    const __global long2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global long2 *dst,
    const __local long2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global long2 *dst,
    const __local long2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global long2 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ulong2 *dst,
    const __global ulong2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ulong2 *dst,
    const __global ulong2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ulong2 *dst,
    const __local ulong2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ulong2 *dst,
    const __local ulong2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ulong2 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local float2 *dst,
    const __global float2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local float2 *dst,
    const __global float2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global float2 *dst,
    const __local float2 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global float2 *dst,
    const __local float2 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global float2 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local char3 *dst,
    const __global char3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local char3 *dst,
    const __global char3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global char3 *dst,
    const __local char3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global char3 *dst,
    const __local char3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global char3 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uchar3 *dst,
    const __global uchar3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uchar3 *dst,
    const __global uchar3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uchar3 *dst,
    const __local uchar3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uchar3 *dst,
    const __local uchar3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uchar3 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local short3 *dst,
    const __global short3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local short3 *dst,
    const __global short3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global short3 *dst,
    const __local short3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global short3 *dst,
    const __local short3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global short3 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ushort3 *dst,
    const __global ushort3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ushort3 *dst,
    const __global ushort3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ushort3 *dst,
    const __local ushort3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ushort3 *dst,
    const __local ushort3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ushort3 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local int3 *dst,
    const __global int3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local int3 *dst,
    const __global int3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global int3 *dst,
    const __local int3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global int3 *dst,
    const __local int3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global int3 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uint3 *dst,
    const __global uint3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uint3 *dst,
    const __global uint3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uint3 *dst,
    const __local uint3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uint3 *dst,
    const __local uint3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uint3 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local long3 *dst,
    const __global long3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local long3 *dst,
    const __global long3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global long3 *dst,
    const __local long3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global long3 *dst,
    const __local long3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global long3 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ulong3 *dst,
    const __global ulong3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ulong3 *dst,
    const __global ulong3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ulong3 *dst,
    const __local ulong3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ulong3 *dst,
    const __local ulong3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ulong3 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local float3 *dst,
    const __global float3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local float3 *dst,
    const __global float3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global float3 *dst,
    const __local float3 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global float3 *dst,
    const __local float3 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global float3 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local char4 *dst,
    const __global char4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local char4 *dst,
    const __global char4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global char4 *dst,
    const __local char4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global char4 *dst,
    const __local char4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global char4 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uchar4 *dst,
    const __global uchar4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uchar4 *dst,
    const __global uchar4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uchar4 *dst,
    const __local uchar4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uchar4 *dst,
    const __local uchar4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uchar4 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local short4 *dst,
    const __global short4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local short4 *dst,
    const __global short4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global short4 *dst,
    const __local short4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global short4 *dst,
    const __local short4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global short4 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ushort4 *dst,
    const __global ushort4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ushort4 *dst,
    const __global ushort4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ushort4 *dst,
    const __local ushort4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ushort4 *dst,
    const __local ushort4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ushort4 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local int4 *dst,
    const __global int4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local int4 *dst,
    const __global int4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global int4 *dst,
    const __local int4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global int4 *dst,
    const __local int4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global int4 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uint4 *dst,
    const __global uint4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uint4 *dst,
    const __global uint4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uint4 *dst,
    const __local uint4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uint4 *dst,
    const __local uint4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uint4 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local long4 *dst,
    const __global long4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local long4 *dst,
    const __global long4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global long4 *dst,
    const __local long4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global long4 *dst,
    const __local long4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global long4 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ulong4 *dst,
    const __global ulong4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ulong4 *dst,
    const __global ulong4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ulong4 *dst,
    const __local ulong4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ulong4 *dst,
    const __local ulong4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ulong4 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local float4 *dst,
    const __global float4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local float4 *dst,
    const __global float4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global float4 *dst,
    const __local float4 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global float4 *dst,
    const __local float4 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global float4 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local char8 *dst,
    const __global char8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local char8 *dst,
    const __global char8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global char8 *dst,
    const __local char8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global char8 *dst,
    const __local char8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global char8 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uchar8 *dst,
    const __global uchar8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uchar8 *dst,
    const __global uchar8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uchar8 *dst,
    const __local uchar8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uchar8 *dst,
    const __local uchar8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uchar8 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local short8 *dst,
    const __global short8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local short8 *dst,
    const __global short8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global short8 *dst,
    const __local short8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global short8 *dst,
    const __local short8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global short8 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ushort8 *dst,
    const __global ushort8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ushort8 *dst,
    const __global ushort8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ushort8 *dst,
    const __local ushort8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ushort8 *dst,
    const __local ushort8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ushort8 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local int8 *dst,
    const __global int8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local int8 *dst,
    const __global int8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global int8 *dst,
    const __local int8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global int8 *dst,
    const __local int8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global int8 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uint8 *dst,
    const __global uint8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uint8 *dst,
    const __global uint8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uint8 *dst,
    const __local uint8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uint8 *dst,
    const __local uint8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uint8 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local long8 *dst,
    const __global long8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local long8 *dst,
    const __global long8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global long8 *dst,
    const __local long8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global long8 *dst,
    const __local long8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global long8 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ulong8 *dst,
    const __global ulong8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ulong8 *dst,
    const __global ulong8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ulong8 *dst,
    const __local ulong8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ulong8 *dst,
    const __local ulong8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ulong8 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local float8 *dst,
    const __global float8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local float8 *dst,
    const __global float8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global float8 *dst,
    const __local float8 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global float8 *dst,
    const __local float8 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global float8 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local char16 *dst,
    const __global char16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local char16 *dst,
    const __global char16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global char16 *dst,
    const __local char16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global char16 *dst,
    const __local char16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global char16 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uchar16 *dst,
    const __global uchar16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uchar16 *dst,
    const __global uchar16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uchar16 *dst,
    const __local uchar16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uchar16 *dst,
    const __local uchar16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uchar16 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local short16 *dst,
    const __global short16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local short16 *dst,
    const __global short16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global short16 *dst,
    const __local short16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global short16 *dst,
    const __local short16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global short16 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ushort16 *dst,
    const __global ushort16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ushort16 *dst,
    const __global ushort16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ushort16 *dst,
    const __local ushort16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ushort16 *dst,
    const __local ushort16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ushort16 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local int16 *dst,
    const __global int16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local int16 *dst,
    const __global int16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global int16 *dst,
    const __local int16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global int16 *dst,
    const __local int16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global int16 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local uint16 *dst,
    const __global uint16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local uint16 *dst,
    const __global uint16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global uint16 *dst,
    const __local uint16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global uint16 *dst,
    const __local uint16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global uint16 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local long16 *dst,
    const __global long16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local long16 *dst,
    const __global long16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global long16 *dst,
    const __local long16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global long16 *dst,
    const __local long16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global long16 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local ulong16 *dst,
    const __global ulong16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local ulong16 *dst,
    const __global ulong16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global ulong16 *dst,
    const __local ulong16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global ulong16 *dst,
    const __local ulong16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global ulong16 *p, size_t num_elements);



event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __local float16 *dst,
    const __global float16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __local float16 *dst,
    const __global float16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_copy( 
    __global float16 *dst,
    const __local float16 *src,
    size_t num_elements,
    event_t event);
event_t __attribute__((always_inline)) __attribute__((overloadable)) async_work_group_strided_copy(
    __global float16 *dst,
    const __local float16 *src,
    size_t num_elements,
    size_t stride,
    event_t event);

void __attribute__((always_inline)) __attribute__((overloadable)) prefetch (const __global float16 *p, size_t num_elements);
