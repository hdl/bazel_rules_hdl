# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

This patch makes Nextpnr not use std::random_shuffle, which was removed
in C++17. This patch was suggested for merging into the main NextPNR
repository in https://github.com/YosysHQ/nextpnr/pull/548

diff --git common/nextpnr.h common/nextpnr.h
index f9376fea..2c66a46a 100644
--- common/nextpnr.h
+++ common/nextpnr.h
@@ -631,15 +631,21 @@ struct DeterministicRNG
             rng64();
     }
 
-    template <typename T> void shuffle(std::vector<T> &a)
+    template <typename Iter> void shuffle(const Iter& begin, const Iter& end)
     {
-        for (size_t i = 0; i != a.size(); i++) {
-            size_t j = i + rng(a.size() - i);
+        size_t size = end - begin;
+        for (size_t i = 0; i != size; i++) {
+            size_t j = i + rng(size - i);
             if (j > i)
-                std::swap(a[i], a[j]);
+                std::swap(*(begin + i), *(begin + j));
         }
     }
 
+    template <typename T> void shuffle(std::vector<T> &a)
+    {
+        shuffle(a.begin(), a.end());
+    }
+
     template <typename T> void sorted_shuffle(std::vector<T> &a)
     {
         std::sort(a.begin(), a.end());
diff --git common/placer_heap.cc common/placer_heap.cc
index 790c2230..908be49e 100644
--- common/placer_heap.cc
+++ common/placer_heap.cc
@@ -530,7 +530,7 @@ class HeAPPlacer
             available_bels[ctx->getBelType(bel)].push_back(bel);
         }
         for (auto &t : available_bels) {
-            std::random_shuffle(t.second.begin(), t.second.end(), [&](size_t n) { return ctx->rng(int(n)); });
+            ctx->shuffle(t.second.begin(), t.second.end());
         }
         for (auto cell : sorted(ctx->cells)) {
             CellInfo *ci = cell.second;
